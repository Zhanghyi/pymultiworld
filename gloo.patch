diff --git a/gloo/rendezvous/context.cc b/gloo/rendezvous/context.cc
index 9d6e3ca..24886a3 100644
--- a/gloo/rendezvous/context.cc
+++ b/gloo/rendezvous/context.cc
@@ -8,6 +8,7 @@
 
 #include "gloo/rendezvous/context.h"
 
+#include <iostream>
 #include <memory>
 
 #include "gloo/common/logging.h"
@@ -28,7 +29,9 @@ Context::~Context() {
 void Context::connectFullMesh(
     rendezvous::Store& store,
     std::shared_ptr<transport::Device>& dev) {
+  std::cout << ">>> connectFullMesh: address of store = " << std::addressof(store) << std::endl;
   auto transportContext = dev->createContext(rank, size);
+
   transportContext->setTimeout(getTimeout());
 
   transportContext->createAndConnectAllPairs(store);
diff --git a/gloo/rendezvous/prefix_store.cc b/gloo/rendezvous/prefix_store.cc
index 8065356..b4baef5 100644
--- a/gloo/rendezvous/prefix_store.cc
+++ b/gloo/rendezvous/prefix_store.cc
@@ -9,6 +9,7 @@
 #include "prefix_store.h"
 
 #include <sstream>
+#include <iostream>
 
 namespace gloo {
 namespace rendezvous {
@@ -16,7 +17,11 @@ namespace rendezvous {
 PrefixStore::PrefixStore(
     const std::string& prefix,
     Store& store)
-    : prefix_(prefix), store_(store) {}
+    : prefix_(prefix), store_(store) {
+  std::cout << ">>> gloo::rendezvous:PrefixStore prefix = " << prefix << std::endl;
+  std::cout << ">>> gloo::rendezvous:PrefixStore addr(store)= " << std::addressof(store) << std::endl;
+  std::cout << ">>> gloo::rendezvous:PrefixStore addr(store_)= " << std::addressof(store_) << std::endl;
+}
 
 std::string PrefixStore::joinKey(const std::string& key) {
   std::stringstream ss;
diff --git a/gloo/transport/tcp/context.cc b/gloo/transport/tcp/context.cc
index f1445b2..3526abb 100644
--- a/gloo/transport/tcp/context.cc
+++ b/gloo/transport/tcp/context.cc
@@ -8,6 +8,7 @@
 
 #include "gloo/transport/tcp/context.h"
 
+#include <iostream>
 #include <cstring>
 
 #include "gloo/common/error.h"
@@ -48,7 +49,6 @@ void Context::createAndConnectAllPairs(IStore &store) {
   int localRank = 0;
   bool localRankSet = false;
   auto localHostName = getHostname();
-
   // We will create all the pairs including self
   // the self pair will not be connected
   // it's just to keep the later seq num matching logic simple
@@ -58,7 +58,6 @@ void Context::createAndConnectAllPairs(IStore &store) {
     pairIdentifiers.emplace_back(
         static_cast<Pair*>(pair.get())->address().getSeq());
   }
-
   // Obtain the pair object for this rank
   // and tack on all the pair identifiers used for the remote side
   // to identify themselves use during the rendezvous process
@@ -75,7 +74,7 @@ void Context::createAndConnectAllPairs(IStore &store) {
   auto deviceAddress = Address(
       static_cast<const Pair*>(currentRankPair.get())->address().getSockaddr());
   Rank currentRankInfo(
-      localHostName, deviceAddress.bytes(), std::move(pairIdentifiers));
+		       localHostName, deviceAddress.bytes(), std::move(pairIdentifiers));
   store.set(std::to_string(rank), currentRankInfo.bytes());
 
   // Connect every pair
@@ -92,30 +91,42 @@ void Context::createAndConnectAllPairs(IStore &store) {
     // Wait for address of other side of this pair to become available
     std::ostringstream key;
     key << i;
+    std::cout << ">>> createAndConnectAllPairs: before wait " << i << std::endl;
     store.wait({key.str()}, getTimeout());
+    std::cout << ">>> createAndConnectAllPairs: after wait " << i << std::endl;
 
     // Connect to other side of this pair
     std::vector<char> rankInfoBytes = store.get(key.str());
     Rank remoteRankInfo(rankInfoBytes);
+    std::cout << ">>> createAndConnectAllPairs 15 " << i << std::endl;
     const auto& remoteHostname = remoteRankInfo.hostname;
+    std::cout << ">>> createAndConnectAllPairs 16 " << i << std::endl;
     if (!localRankSet && remoteHostname == localHostName) {
       ++localRank;
     }
+    std::cout << ">>> createAndConnectAllPairs 17 " << i << std::endl;
 
     const auto& pair = getPair(i);
+    std::cout << ">>> createAndConnectAllPairs 18 " << i << std::endl;
     auto remoteDeviceAddr = Address(remoteRankInfo.addressBytes).getSockaddr();
+    std::cout << ">>> createAndConnectAllPairs 19 " << i << std::endl;
     auto remoteAddr =
         Address(remoteDeviceAddr, remoteRankInfo.pairIdentifiers[rank]);
+    std::cout << ">>> createAndConnectAllPairs 20 " << i << std::endl;
     pair->connect(remoteAddr.bytes());
+    std::cout << ">>> createAndConnectAllPairs 21 " << i << std::endl;
   }
-
+  std::cout << ">>> createAndConnectAllPairs 22 " << std::endl;
   // Set the local rank info for all mesh pairs involving current rank
   for (int i = 0; i < size; i++) {
     if (i == rank) {
       continue;
     }
+    std::cout << ">>> createAndConnectAllPairs 23 " << i << std::endl;
     const auto& pair = getPair(i);
+    std::cout << ">>> createAndConnectAllPairs 24 " << i << std::endl;
     pair->setLocalRank(localRank);
+    std::cout << ">>> createAndConnectAllPairs 25 " << i << std::endl;
   }
 }
 
